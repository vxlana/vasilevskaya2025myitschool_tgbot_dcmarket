import aiohttp
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
import os

import asyncio
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, \
    InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State

from io import BytesIO

import config #–ò–º–ø–æ—Ä—Ç —Ñ–∞–π–ª–∞ config
import keyboard #–ò–º–ø–æ—Ä—Ç —Ñ–∞–π–ª–∞ config keyboard
import logging #–ú–æ–¥—É–ª—å –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏


storage = MemoryStorage() # FSM
bot = Bot(token=config.botkey, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=storage) # —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏

logging.basicConfig(format=u'%(filename)s [LINE:%(lineno)d] #%(levelname)-8s [%(asctime)s] %(message)s',
                    level=logging.INFO,
                    )


# ================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ START ===================
@dp.message_handler(Command('start'), state=None) # –∑–∞–¥–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã start
async def welcome(message):
    joinedFile = open('user.txt', 'r') #
    joinedUsers = set()
    for line in joinedFile: # —Ü–∏–∫–ª –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–µ–µ—Ç—Å—è –ª–∏ —Ç–∞–∫–æ–π id –≤ —Ñ–∞–π–ª–µ user
        joinedUsers.add(line.strip())

    if not str(message.chat.id) in joinedUsers: # –¥–µ–ª–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª user –Ω–æ–≤–æ–≥–æ id
        joinedFile = open('user.txt', 'a')
        joinedFile.write(str(message.chat.id) + '\n')
        joinedUsers.add(message.chat.id)

    await bot.send_message(message.chat.id, f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, * {message.from_user.first_name} *! –í—ã–±–∏—Ä–∞–π —Ç–æ–≤–∞—Ä—ã, —Å–ª–µ–¥–∏ –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º –∑–∞–∫–∞–∑–æ–≤ –∏ –±—É–¥—å –≤ —Ç—Ä–µ–Ω–¥–µ –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏!',
                           reply_markup=keyboard.start, parse_mode='Markdown')

# ===================== –†–ï–ñ–ò–ú –†–ê–ë–û–¢–´ =====================

@dp.message_handler(lambda message: message.text == 'üïí –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã')
async def market_open_command(message: types.Message):
    await bot.send_message(message.from_user.id, '–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: –ü–Ω-–ß—Ç —Å 11:00 –¥–æ 22:00, –ü—Ç-–í—Å —Å 10:00 –¥–æ 23:00')

# ======================== –ê–î–†–ï–° =========================

@dp.message_handler(lambda message: message.text == 'üìç –ê–¥—Ä–µ—Å')
async def market_place_command(message: types.Message):
    await bot.send_message(message.from_user.id, '–ø—Ä. –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π, 115')
    await bot.send_location(message.from_user.id, latitude=53.936433, longitude=27.477624)


# ==================== –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ ====================

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async def get_categories():
    async with aiohttp.ClientSession() as session:
        async with session.get('http://127.0.0.1:8000/api/categories/') as resp:
            return await resp.json()


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def get_products(category_id):
    async with aiohttp.ClientSession() as session:
        async with session.get(f'http://127.0.0.1:8000/api/clothing/category/{category_id}/') as resp:
            return await resp.json()


# –ö–Ω–æ–ø–∫–∞: –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
@dp.message_handler(lambda message: message.text == '–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤')
async def show_categories(message: types.Message):
    categories = await get_categories()

    keyboard = InlineKeyboardMarkup(row_width=1)
    for category in categories:
        keyboard.add(InlineKeyboardButton(category['name'], callback_data=f"category_{category['id']}"))

    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=keyboard)


# –ü–æ–∫–∞–∑ —Ç–æ–≤–∞—Ä–æ–≤
user_products = {}

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('category_'))
async def show_products(callback_query: types.CallbackQuery):
    category_id = int(callback_query.data.split('_')[1])
    products = await get_products(category_id)

    if products:
        user_products[callback_query.from_user.id] = {'products': products, 'index': 0}
        await send_product(callback_query.from_user.id)
    else:
        await bot.send_message(callback_query.from_user.id, '–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.')




async def send_product(user_id):
    user_data = user_products[user_id]
    products = user_data['products']
    index = user_data['index']
    product = products[index]

    keyboard = InlineKeyboardMarkup()
    if index + 1 < len(products):
        keyboard.add(InlineKeyboardButton('–°–ª–µ–¥—É—é—â–∏–π —Ç–æ–≤–∞—Ä', callback_data='next_product'))

    if product['image']:
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(product['image']) as resp:
                    if resp.status == 200:
                        photo = BytesIO(await resp.read())
                        photo.name = 'image.jpg'
                        await bot.send_photo(user_id, photo=photo,
                            caption=f"{product['name']}\n–¶–µ–Ω–∞: {product['price']} $\n–°–∫–∏–¥–∫–∞: {product['discount']}%\n–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π: {product['price_with_discount']} $\n\n{product['description']}",
                            reply_markup=keyboard)
                    else:
                        await bot.send_message(user_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞: {product['name']}")
        except Exception as e:
            await bot.send_message(user_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞: {product['name']}\n{str(e)}")
    else:
        await bot.send_message(user_id, f"–§–æ—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product['name']} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")



@dp.callback_query_handler(lambda c: c.data == 'next_product')
async def next_product(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_products[user_id]['index'] += 1
    await send_product(user_id)

# ===============================================

@dp.message_handler()
async def echo_send(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.')

# ===============================================

if __name__ == '__main__':
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
    executor.start_polling(dp, skip_updates=True)

